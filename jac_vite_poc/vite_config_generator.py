# vite_config_generator.py

def generate_vite_config_js() -> str:
    """Generates the content for the vite.config.js file."""
    return """
import { defineConfig } from 'vite';

export default defineConfig({
    // Use an absolute path for the root if running Vite from a different directory
    // or just rely on the temp directory being the CWD.
    build: {
        outDir: 'dist',         // Output directory relative to the project root (temp_dir)
        emptyOutDir: true,
        minify: false,
        sourcemap: true,
        lib: {
            entry: 'main_entry.js', // The wrapper file generated by the orchestrator
            name: 'JacClient',
            fileName: 'client',
            formats: ['es'],        // We are targeting modern ES modules
        }
    },
});
"""

def generate_package_json() -> str:
    """Generates a minimal package.json file for Vite execution."""
    # Note: Vite and Rollup versions should be kept stable
    return """
{
    "type": "module",
    "scripts": {
        "build": "vite build"
    },
    "devDependencies": {
        "vite": "^5.0.0"
    }
}
"""

def generate_main_entry_js(app_module_name: str, client_functions: list[str]) -> str:
    """
    Generates the main_entry.js file which is the application's entry point.

    Args:
        app_module_name: The name of the transpiled application logic file (e.g., 'app_logic').
        client_functions: A list of functions exported by the application (e.g., ['littlex_app']).
    """
    
    # 1. Imports from runtime (must be exported in jac_runtime.js)
    runtime_imports = ['renderJsxTree', '__jacExecuteHydration', 'jacSignup', 'jacLogin', 'jacLogout', 'jacIsLoggedIn']
    runtime_import_str = f"import {{ {', '.join(runtime_imports)} }} from './jac_runtime.js';"
    
    # 2. Imports from application logic (e.g., littlex_app, navigate_to)
    app_import_str = f"import {{ {', '.join(client_functions)} }} from './{app_module_name}.js';"

    # 3. Wrapper Logic
    return f"""
// main_entry.js - The Orchestration Wrapper

{runtime_import_str}
{app_import_str}

// ⚠️ Note: Global exposure is a temporary hack for Jac's current global reliance.
// The long-term goal is to have the Jac compiler replace global calls with imports.
// For POC purposes, we re-expose the main app entry function and runtime dependencies globally.
window.littlex_app = littlex_app; 
window.jacSignup = jacSignup;
window.jacLogin = jacLogin;
window.jacLogout = jacLogout;
window.jacIsLoggedIn = jacIsLoggedIn;


// --- Application Startup ---
// 1. Initialise the router and get the root JSX node
const initialJsxNode = littlex_app();

// 2. Start the hydration/rendering process.
// This function will look for the JSX tree and render it.
// It also contains the logic to run the first client function (like littlex_app) 
// if running without SSR hydration.
__jacExecuteHydration();


// --- HMR Placeholder (for future reference) ---
// if (import.meta.hot) {{
//     import.meta.hot.accept(() => {{
//         // Logic to re-run littlex_app() and call renderJsxTree() on the root
//         console.log('HMR update received for Jac application.');
//         // renderJsxTree(littlex_app(), document.getElementById("__jac_root")); 
//     }});
// }}
"""