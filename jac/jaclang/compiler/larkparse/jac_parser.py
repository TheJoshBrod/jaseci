# The file was automatically generated by Lark v1.2.2
__version__ = "1.2.2"

#
#
#   Lark Stand-alone Generator Tool
# ----------------------------------
# Generates a stand-alone LALR(1) parser
#
# Git:    https://github.com/erezsh/lark
# Author: Erez Shinan (erezshin@gmail.com)
#
#
#    >>> LICENSE
#
#    This tool and its generated code use a separate license from Lark,
#    and are subject to the terms of the Mozilla Public License, v. 2.0.
#    If a copy of the MPL was not distributed with this
#    file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#    If you wish to purchase a commercial license for this tool and its
#    generated code, you may contact me via email or otherwise.
#
#    If MPL2 is incompatible with your free or open-source project,
#    contact me and we'll work it out.
#
#

from copy import deepcopy
from abc import ABC, abstractmethod
from types import ModuleType
from typing import (
    TypeVar, Generic, Type, Tuple, List, Dict, Iterator, Collection, Callable, Optional, FrozenSet, Any,
    Union, Iterable, IO, TYPE_CHECKING, overload, Sequence,
    Pattern as REPattern, ClassVar, Set, Mapping
)


class LarkError(Exception):
    pass


class ConfigurationError(LarkError, ValueError):
    pass


def assert_config(value, options: Collection, msg='Got %r, expected one of %s'):
    if value not in options:
        raise ConfigurationError(msg % (value, options))


class GrammarError(LarkError):
    pass


class ParseError(LarkError):
    pass


class LexError(LarkError):
    pass

T = TypeVar('T')

class UnexpectedInput(LarkError):
    #--
    line: int
    column: int
    pos_in_stream = None
    state: Any
    _terminals_by_name = None
    interactive_parser: 'InteractiveParser'

    def get_context(self, text: str, span: int=40) -> str:
        #--
        assert self.pos_in_stream is not None, self
        pos = self.pos_in_stream
        start = max(pos - span, 0)
        end = pos + span
        if not isinstance(text, bytes):
            before = text[start:pos].rsplit('\n', 1)[-1]
            after = text[pos:end].split('\n', 1)[0]
            return before + after + '\n' + ' ' * len(before.expandtabs()) + '^\n'
        else:
            before = text[start:pos].rsplit(b'\n', 1)[-1]
            after = text[pos:end].split(b'\n', 1)[0]
            return (before + after + b'\n' + b' ' * len(before.expandtabs()) + b'^\n').decode("ascii", "backslashreplace")

    def match_examples(self, parse_fn: 'Callable[[str], Tree]',
                             examples: Union[Mapping[T, Iterable[str]], Iterable[Tuple[T, Iterable[str]]]],
                             token_type_match_fallback: bool=False,
                             use_accepts: bool=True
                         ) -> Optional[T]:
        #--
        assert self.state is not None, "Not supported for this exception"

        if isinstance(examples, Mapping):
            examples = examples.items()

        candidate = (None, False)
        for i, (label, example) in enumerate(examples):
            assert not isinstance(example, str), "Expecting a list"

            for j, malformed in enumerate(example):
                try:
                    parse_fn(malformed)
                except UnexpectedInput as ut:
                    if ut.state == self.state:
                        if (
                            use_accepts
                            and isinstance(self, UnexpectedToken)
                            and isinstance(ut, UnexpectedToken)
                            and ut.accepts != self.accepts
                        ):
                            logger.debug("Different accepts with same state[%d]: %s != %s at example [%s][%s]" %
                                         (self.state, self.accepts, ut.accepts, i, j))
                            continue
                        if (
                            isinstance(self, (UnexpectedToken, UnexpectedEOF))
                            and isinstance(ut, (UnexpectedToken, UnexpectedEOF))
                        ):
                            if ut.token == self.token:  ##

                                logger.debug("Exact Match at example [%s][%s]" % (i, j))
                                return label

                            if token_type_match_fallback:
                                ##

                                if (ut.token.type == self.token.type) and not candidate[-1]:
                                    logger.debug("Token Type Fallback at example [%s][%s]" % (i, j))
                                    candidate = label, True

                        if candidate[0] is None:
                            logger.debug("Same State match at example [%s][%s]" % (i, j))
                            candidate = label, False

        return candidate[0]

    def _format_expected(self, expected):
        if self._terminals_by_name:
            d = self._terminals_by_name
            expected = [d[t_name].user_repr() if t_name in d else t_name for t_name in expected]
        return "Expected one of: \n\t* %s\n" % '\n\t* '.join(expected)


class UnexpectedEOF(ParseError, UnexpectedInput):
    #--
    expected: 'List[Token]'

    def __init__(self, expected, state=None, terminals_by_name=None):
        super(UnexpectedEOF, self).__init__()

        self.expected = expected
        self.state = state
        from .lexer import Token
        self.token = Token("<EOF>", "")  ##

        self.pos_in_stream = -1
        self.line = -1
        self.column = -1
        self._terminals_by_name = terminals_by_name


    def __str__(self):
        message = "Unexpected end-of-input. "
        message += self._format_expected(self.expected)
        return message


class UnexpectedCharacters(LexError, UnexpectedInput):
    #--

    allowed: Set[str]
    considered_tokens: Set[Any]

    def __init__(self, seq, lex_pos, line, column, allowed=None, considered_tokens=None, state=None, token_history=None,
                 terminals_by_name=None, considered_rules=None):
        super(UnexpectedCharacters, self).__init__()

        ##

        self.line = line
        self.column = column
        self.pos_in_stream = lex_pos
        self.state = state
        self._terminals_by_name = terminals_by_name

        self.allowed = allowed
        self.considered_tokens = considered_tokens
        self.considered_rules = considered_rules
        self.token_history = token_history

        if isinstance(seq, bytes):
            self.char = seq[lex_pos:lex_pos + 1].decode("ascii", "backslashreplace")
        else:
            self.char = seq[lex_pos]
        self._context = self.get_context(seq)


    def __str__(self):
        message = "No terminal matches '%s' in the current parser context, at line %d col %d" % (self.char, self.line, self.column)
        message += '\n\n' + self._context
        if self.allowed:
            message += self._format_expected(self.allowed)
        if self.token_history:
            message += '\nPrevious tokens: %s\n' % ', '.join(repr(t) for t in self.token_history)
        return message


class UnexpectedToken(ParseError, UnexpectedInput):
    #--

    expected: Set[str]
    considered_rules: Set[str]

    def __init__(self, token, expected, considered_rules=None, state=None, interactive_parser=None, terminals_by_name=None, token_history=None):
        super(UnexpectedToken, self).__init__()

        ##

        self.line = getattr(token, 'line', '?')
        self.column = getattr(token, 'column', '?')
        self.pos_in_stream = getattr(token, 'start_pos', None)
        self.state = state

        self.token = token
        self.expected = expected  ##

        self._accepts = NO_VALUE
        self.considered_rules = considered_rules
        self.interactive_parser = interactive_parser
        self._terminals_by_name = terminals_by_name
        self.token_history = token_history


    @property
    def accepts(self) -> Set[str]:
        if self._accepts is NO_VALUE:
            self._accepts = self.interactive_parser and self.interactive_parser.accepts()
        return self._accepts

    def __str__(self):
        message = ("Unexpected token %r at line %s, column %s.\n%s"
                   % (self.token, self.line, self.column, self._format_expected(self.accepts or self.expected)))
        if self.token_history:
            message += "Previous tokens: %r\n" % self.token_history

        return message



class VisitError(LarkError):
    #--

    obj: 'Union[Tree, Token]'
    orig_exc: Exception

    def __init__(self, rule, obj, orig_exc):
        message = 'Error trying to process rule "%s":\n\n%s' % (rule, orig_exc)
        super(VisitError, self).__init__(message)

        self.rule = rule
        self.obj = obj
        self.orig_exc = orig_exc


class MissingVariableError(LarkError):
    pass


import sys, re
import logging

logger: logging.Logger = logging.getLogger("lark")
logger.addHandler(logging.StreamHandler())
##

##

logger.setLevel(logging.CRITICAL)


NO_VALUE = object()

T = TypeVar("T")


def classify(seq: Iterable, key: Optional[Callable] = None, value: Optional[Callable] = None) -> Dict:
    d: Dict[Any, Any] = {}
    for item in seq:
        k = key(item) if (key is not None) else item
        v = value(item) if (value is not None) else item
        try:
            d[k].append(v)
        except KeyError:
            d[k] = [v]
    return d


def _deserialize(data: Any, namespace: Dict[str, Any], memo: Dict) -> Any:
    if isinstance(data, dict):
        if '__type__' in data:  ##

            class_ = namespace[data['__type__']]
            return class_.deserialize(data, memo)
        elif '@' in data:
            return memo[data['@']]
        return {key:_deserialize(value, namespace, memo) for key, value in data.items()}
    elif isinstance(data, list):
        return [_deserialize(value, namespace, memo) for value in data]
    return data


_T = TypeVar("_T", bound="Serialize")

class Serialize:
    #--

    def memo_serialize(self, types_to_memoize: List) -> Any:
        memo = SerializeMemoizer(types_to_memoize)
        return self.serialize(memo), memo.serialize()

    def serialize(self, memo = None) -> Dict[str, Any]:
        if memo and memo.in_types(self):
            return {'@': memo.memoized.get(self)}

        fields = getattr(self, '__serialize_fields__')
        res = {f: _serialize(getattr(self, f), memo) for f in fields}
        res['__type__'] = type(self).__name__
        if hasattr(self, '_serialize'):
            self._serialize(res, memo)
        return res

    @classmethod
    def deserialize(cls: Type[_T], data: Dict[str, Any], memo: Dict[int, Any]) -> _T:
        namespace = getattr(cls, '__serialize_namespace__', [])
        namespace = {c.__name__:c for c in namespace}

        fields = getattr(cls, '__serialize_fields__')

        if '@' in data:
            return memo[data['@']]

        inst = cls.__new__(cls)
        for f in fields:
            try:
                setattr(inst, f, _deserialize(data[f], namespace, memo))
            except KeyError as e:
                raise KeyError("Cannot find key for class", cls, e)

        if hasattr(inst, '_deserialize'):
            inst._deserialize()

        return inst


class SerializeMemoizer(Serialize):
    #--

    __serialize_fields__ = 'memoized',

    def __init__(self, types_to_memoize: List) -> None:
        self.types_to_memoize = tuple(types_to_memoize)
        self.memoized = Enumerator()

    def in_types(self, value: Serialize) -> bool:
        return isinstance(value, self.types_to_memoize)

    def serialize(self) -> Dict[int, Any]:  ##

        return _serialize(self.memoized.reversed(), None)

    @classmethod
    def deserialize(cls, data: Dict[int, Any], namespace: Dict[str, Any], memo: Dict[Any, Any]) -> Dict[int, Any]:  ##

        return _deserialize(data, namespace, memo)


try:
    import regex
    _has_regex = True
except ImportError:
    _has_regex = False

if sys.version_info >= (3, 11):
    import re._parser as sre_parse
    import re._constants as sre_constants
else:
    import sre_parse
    import sre_constants

categ_pattern = re.compile(r'\\p{[A-Za-z_]+}')

def get_regexp_width(expr: str) -> Union[Tuple[int, int], List[int]]:
    if _has_regex:
        ##

        ##

        ##

        regexp_final = re.sub(categ_pattern, 'A', expr)
    else:
        if re.search(categ_pattern, expr):
            raise ImportError('`regex` module must be installed in order to use Unicode categories.', expr)
        regexp_final = expr
    try:
        ##

        return [int(x) for x in sre_parse.parse(regexp_final).getwidth()]
    except sre_constants.error:
        if not _has_regex:
            raise ValueError(expr)
        else:
            ##

            ##

            c = regex.compile(regexp_final)
            ##

            ##

            MAXWIDTH = getattr(sre_parse, "MAXWIDTH", sre_constants.MAXREPEAT)
            if c.match('') is None:
                ##

                return 1, int(MAXWIDTH)
            else:
                return 0, int(MAXWIDTH)



class Meta:

    empty: bool
    line: int
    column: int
    start_pos: int
    end_line: int
    end_column: int
    end_pos: int
    orig_expansion: 'List[TerminalDef]'
    match_tree: bool

    def __init__(self):
        self.empty = True


_Leaf_T = TypeVar("_Leaf_T")
Branch = Union[_Leaf_T, 'Tree[_Leaf_T]']


class Tree(Generic[_Leaf_T]):
    #--

    data: str
    children: 'List[Branch[_Leaf_T]]'

    def __init__(self, data: str, children: 'List[Branch[_Leaf_T]]', meta: Optional[Meta]=None) -> None:
        self.data = data
        self.children = children
        self._meta = meta

    @property
    def meta(self) -> Meta:
        if self._meta is None:
            self._meta = Meta()
        return self._meta

    def __repr__(self):
        return 'Tree(%r, %r)' % (self.data, self.children)

    def _pretty_label(self):
        return self.data

    def _pretty(self, level, indent_str):
        yield f'{indent_str*level}{self._pretty_label()}'
        if len(self.children) == 1 and not isinstance(self.children[0], Tree):
            yield f'\t{self.children[0]}\n'
        else:
            yield '\n'
            for n in self.children:
                if isinstance(n, Tree):
                    yield from n._pretty(level+1, indent_str)
                else:
                    yield f'{indent_str*(level+1)}{n}\n'

    def pretty(self, indent_str: str='  ') -> str:
        #--
        return ''.join(self._pretty(0, indent_str))

    def __rich__(self, parent:Optional['rich.tree.Tree']=None) -> 'rich.tree.Tree':
        #--
        return self._rich(parent)

    def _rich(self, parent):
        if parent:
            tree = parent.add(f'[bold]{self.data}[/bold]')
        else:
            import rich.tree
            tree = rich.tree.Tree(self.data)

        for c in self.children:
            if isinstance(c, Tree):
                c._rich(tree)
            else:
                tree.add(f'[green]{c}[/green]')

        return tree

    def __eq__(self, other):
        try:
            return self.data == other.data and self.children == other.children
        except AttributeError:
            return False

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self) -> int:
        return hash((self.data, tuple(self.children)))

    def iter_subtrees(self) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        queue = [self]
        subtrees = dict()
        for subtree in queue:
            subtrees[id(subtree)] = subtree
            queue += [c for c in reversed(subtree.children)
                      if isinstance(c, Tree) and id(c) not in subtrees]

        del queue
        return reversed(list(subtrees.values()))

    def iter_subtrees_topdown(self):
        #--
        stack = [self]
        stack_append = stack.append
        stack_pop = stack.pop
        while stack:
            node = stack_pop()
            if not isinstance(node, Tree):
                continue
            yield node
            for child in reversed(node.children):
                stack_append(child)

    def find_pred(self, pred: 'Callable[[Tree[_Leaf_T]], bool]') -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return filter(pred, self.iter_subtrees())

    def find_data(self, data: str) -> 'Iterator[Tree[_Leaf_T]]':
        #--
        return self.find_pred(lambda t: t.data == data)


from functools import wraps, update_wrapper
from inspect import getmembers, getmro

_Return_T = TypeVar('_Return_T')
_Return_V = TypeVar('_Return_V')
_Leaf_T = TypeVar('_Leaf_T')
_Leaf_U = TypeVar('_Leaf_U')
_R = TypeVar('_R')
_FUNC = Callable[..., _Return_T]
_DECORATED = Union[_FUNC, type]

class _DiscardType:
    #--

    def __repr__(self):
        return "lark.visitors.Discard"

Discard = _DiscardType()

##


class _Decoratable:
    #--

    @classmethod
    def _apply_v_args(cls, visit_wrapper):
        mro = getmro(cls)
        assert mro[0] is cls
        libmembers = {name for _cls in mro[1:] for name, _ in getmembers(_cls)}
        for name, value in getmembers(cls):

            ##

            if name.startswith('_') or (name in libmembers and name not in cls.__dict__):
                continue
            if not callable(value):
                continue

            ##

            if isinstance(cls.__dict__[name], _VArgsWrapper):
                continue

            setattr(cls, name, _VArgsWrapper(cls.__dict__[name], visit_wrapper))
        return cls

    def __class_getitem__(cls, _):
        return cls


class Transformer(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--
    __visit_tokens__ = True   ##


    def __init__(self,  visit_tokens: bool=True) -> None:
        self.__visit_tokens__ = visit_tokens

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            try:
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    return f.visit_wrapper(f, tree.data, children, tree.meta)
                else:
                    return f(children)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(tree.data, tree, e)

    def _call_userfunc_token(self, token):
        try:
            f = getattr(self, token.type)
        except AttributeError:
            return self.__default_token__(token)
        else:
            try:
                return f(token)
            except GrammarError:
                raise
            except Exception as e:
                raise VisitError(token.type, token, e)

    def _transform_children(self, children):
        for c in children:
            if isinstance(c, Tree):
                res = self._transform_tree(c)
            elif self.__visit_tokens__ and isinstance(c, Token):
                res = self._call_userfunc_token(c)
            else:
                res = c

            if res is not Discard:
                yield res

    def _transform_tree(self, tree):
        children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree, children)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        #--
        res = list(self._transform_children([tree]))
        if not res:
            return None     ##

        assert len(res) == 1
        return res[0]

    def __mul__(
            self: 'Transformer[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V,]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        #--
        return TransformerChain(self, other)

    def __default__(self, data, children, meta):
        #--
        return Tree(data, children, meta)

    def __default_token__(self, token):
        #--
        return token


def merge_transformers(base_transformer=None, **transformers_to_merge):
    #--
    if base_transformer is None:
        base_transformer = Transformer()
    for prefix, transformer in transformers_to_merge.items():
        for method_name in dir(transformer):
            method = getattr(transformer, method_name)
            if not callable(method):
                continue
            if method_name.startswith("_") or method_name == "transform":
                continue
            prefixed_method = prefix + "__" + method_name
            if hasattr(base_transformer, prefixed_method):
                raise AttributeError("Cannot merge: method '%s' appears more than once" % prefixed_method)

            setattr(base_transformer, prefixed_method, method)

    return base_transformer


class InlineTransformer(Transformer):   ##

    def _call_userfunc(self, tree, new_children=None):
        ##

        children = new_children if new_children is not None else tree.children
        try:
            f = getattr(self, tree.data)
        except AttributeError:
            return self.__default__(tree.data, children, tree.meta)
        else:
            return f(*children)


class TransformerChain(Generic[_Leaf_T, _Return_T]):

    transformers: 'Tuple[Union[Transformer, TransformerChain], ...]'

    def __init__(self, *transformers: 'Union[Transformer, TransformerChain]') -> None:
        self.transformers = transformers

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for t in self.transformers:
            tree = t.transform(tree)
        return cast(_Return_T, tree)

    def __mul__(
            self: 'TransformerChain[_Leaf_T, Tree[_Leaf_U]]',
            other: 'Union[Transformer[_Leaf_U, _Return_V], TransformerChain[_Leaf_U, _Return_V]]'
    ) -> 'TransformerChain[_Leaf_T, _Return_V]':
        return TransformerChain(*self.transformers + (other,))


class Transformer_InPlace(Transformer[_Leaf_T, _Return_T]):
    #--
    def _transform_tree(self, tree):           ##

        return self._call_userfunc(tree)

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        for subtree in tree.iter_subtrees():
            subtree.children = list(self._transform_children(subtree.children))

        return self._transform_tree(tree)


class Transformer_NonRecursive(Transformer[_Leaf_T, _Return_T]):
    #--

    def transform(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        rev_postfix = []
        q: List[Branch[_Leaf_T]] = [tree]
        while q:
            t = q.pop()
            rev_postfix.append(t)
            if isinstance(t, Tree):
                q += t.children

        ##

        stack: List = []
        for x in reversed(rev_postfix):
            if isinstance(x, Tree):
                size = len(x.children)
                if size:
                    args = stack[-size:]
                    del stack[-size:]
                else:
                    args = []

                res = self._call_userfunc(x, args)
                if res is not Discard:
                    stack.append(res)

            elif self.__visit_tokens__ and isinstance(x, Token):
                res = self._call_userfunc_token(x)
                if res is not Discard:
                    stack.append(res)
            else:
                stack.append(x)

        result, = stack  ##

        ##

        ##

        ##

        return cast(_Return_T, result)


class Transformer_InPlaceRecursive(Transformer):
    #--
    def _transform_tree(self, tree):
        tree.children = list(self._transform_children(tree.children))
        return self._call_userfunc(tree)


##


class VisitorBase:
    def _call_userfunc(self, tree):
        return getattr(self, tree.data, self.__default__)(tree)

    def __default__(self, tree):
        #--
        return tree

    def __class_getitem__(cls, _):
        return cls


class Visitor(VisitorBase, ABC, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees():
            self._call_userfunc(subtree)
        return tree

    def visit_topdown(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for subtree in tree.iter_subtrees_topdown():
            self._call_userfunc(subtree)
        return tree


class Visitor_Recursive(VisitorBase, Generic[_Leaf_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        for child in tree.children:
            if isinstance(child, Tree):
                self.visit(child)

        self._call_userfunc(tree)
        return tree

    def visit_topdown(self,tree: Tree[_Leaf_T]) -> Tree[_Leaf_T]:
        #--
        self._call_userfunc(tree)

        for child in tree.children:
            if isinstance(child, Tree):
                self.visit_topdown(child)

        return tree


class Interpreter(_Decoratable, ABC, Generic[_Leaf_T, _Return_T]):
    #--

    def visit(self, tree: Tree[_Leaf_T]) -> _Return_T:
        ##

        ##

        ##

        return self._visit_tree(tree)

    def _visit_tree(self, tree: Tree[_Leaf_T]):
        f = getattr(self, tree.data)
        wrapper = getattr(f, 'visit_wrapper', None)
        if wrapper is not None:
            return f.visit_wrapper(f, tree.data, tree.children, tree.meta)
        else:
            return f(tree)

    def visit_children(self, tree: Tree[_Leaf_T]) -> List:
        return [self._visit_tree(child) if isinstance(child, Tree) else child
                for child in tree.children]

    def __getattr__(self, name):
        return self.__default__

    def __default__(self, tree):
        return self.visit_children(tree)


_InterMethod = Callable[[Type[Interpreter], _Return_T], _R]

def visit_children_decor(func: _InterMethod) -> _InterMethod:
    #--
    @wraps(func)
    def inner(cls, tree):
        values = cls.visit_children(tree)
        return func(cls, values)
    return inner

##


def _apply_v_args(obj, visit_wrapper):
    try:
        _apply = obj._apply_v_args
    except AttributeError:
        return _VArgsWrapper(obj, visit_wrapper)
    else:
        return _apply(visit_wrapper)


class _VArgsWrapper:
    #--
    base_func: Callable

    def __init__(self, func: Callable, visit_wrapper: Callable[[Callable, str, list, Any], Any]):
        if isinstance(func, _VArgsWrapper):
            func = func.base_func
        self.base_func = func
        self.visit_wrapper = visit_wrapper
        update_wrapper(self, func)

    def __call__(self, *args, **kwargs):
        return self.base_func(*args, **kwargs)

    def __get__(self, instance, owner=None):
        try:
            ##

            ##

            g = type(self.base_func).__get__
        except AttributeError:
            return self
        else:
            return _VArgsWrapper(g(self.base_func, instance, owner), self.visit_wrapper)

    def __set_name__(self, owner, name):
        try:
            f = type(self.base_func).__set_name__
        except AttributeError:
            return
        else:
            f(self.base_func, owner, name)


def _vargs_inline(f, _data, children, _meta):
    return f(*children)
def _vargs_meta_inline(f, _data, children, meta):
    return f(meta, *children)
def _vargs_meta(f, _data, children, meta):
    return f(meta, children)
def _vargs_tree(f, data, children, meta):
    return f(Tree(data, children, meta))


def v_args(inline: bool = False, meta: bool = False, tree: bool = False, wrapper: Optional[Callable] = None) -> Callable[[_DECORATED], _DECORATED]:
    #--
    if tree and (meta or inline):
        raise ValueError("Visitor functions cannot combine 'tree' with 'meta' or 'inline'.")

    func = None
    if meta:
        if inline:
            func = _vargs_meta_inline
        else:
            func = _vargs_meta
    elif inline:
        func = _vargs_inline
    elif tree:
        func = _vargs_tree

    if wrapper is not None:
        if func is not None:
            raise ValueError("Cannot use 'wrapper' along with 'tree', 'meta' or 'inline'.")
        func = wrapper

    def _visitor_args_dec(obj):
        return _apply_v_args(obj, func)
    return _visitor_args_dec



TOKEN_DEFAULT_PRIORITY = 0


class Symbol(Serialize):
    __slots__ = ('name',)

    name: str
    is_term: ClassVar[bool] = NotImplemented

    def __init__(self, name: str) -> None:
        self.name = name

    def __eq__(self, other):
        assert isinstance(other, Symbol), other
        return self.is_term == other.is_term and self.name == other.name

    def __ne__(self, other):
        return not (self == other)

    def __hash__(self):
        return hash(self.name)

    def __repr__(self):
        return '%s(%r)' % (type(self).__name__, self.name)

    fullrepr = property(__repr__)

    def renamed(self, f):
        return type(self)(f(self.name))


class Terminal(Symbol):
    __serialize_fields__ = 'name', 'filter_out'

    is_term: ClassVar[bool] = True

    def __init__(self, name, filter_out=False):
        self.name = name
        self.filter_out = filter_out

    @property
    def fullrepr(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.filter_out)

    def renamed(self, f):
        return type(self)(f(self.name), self.filter_out)


class NonTerminal(Symbol):
    __serialize_fields__ = 'name',

    is_term: ClassVar[bool] = False


class RuleOptions(Serialize):
    __serialize_fields__ = 'keep_all_tokens', 'expand1', 'priority', 'template_source', 'empty_indices'

    keep_all_tokens: bool
    expand1: bool
    priority: Optional[int]
    template_source: Optional[str]
    empty_indices: Tuple[bool, ...]

    def __init__(self, keep_all_tokens: bool=False, expand1: bool=False, priority: Optional[int]=None, template_source: Optional[str]=None, empty_indices: Tuple[bool, ...]=()) -> None:
        self.keep_all_tokens = keep_all_tokens
        self.expand1 = expand1
        self.priority = priority
        self.template_source = template_source
        self.empty_indices = empty_indices

    def __repr__(self):
        return 'RuleOptions(%r, %r, %r, %r)' % (
            self.keep_all_tokens,
            self.expand1,
            self.priority,
            self.template_source
        )


class Rule(Serialize):
    #--
    __slots__ = ('origin', 'expansion', 'alias', 'options', 'order', '_hash')

    __serialize_fields__ = 'origin', 'expansion', 'order', 'alias', 'options'
    __serialize_namespace__ = Terminal, NonTerminal, RuleOptions

    origin: NonTerminal
    expansion: Sequence[Symbol]
    order: int
    alias: Optional[str]
    options: RuleOptions
    _hash: int

    def __init__(self, origin: NonTerminal, expansion: Sequence[Symbol],
                 order: int=0, alias: Optional[str]=None, options: Optional[RuleOptions]=None):
        self.origin = origin
        self.expansion = expansion
        self.alias = alias
        self.order = order
        self.options = options or RuleOptions()
        self._hash = hash((self.origin, tuple(self.expansion)))

    def _deserialize(self):
        self._hash = hash((self.origin, tuple(self.expansion)))

    def __str__(self):
        return '<%s : %s>' % (self.origin.name, ' '.join(x.name for x in self.expansion))

    def __repr__(self):
        return 'Rule(%r, %r, %r, %r)' % (self.origin, self.expansion, self.alias, self.options)

    def __hash__(self):
        return self._hash

    def __eq__(self, other):
        if not isinstance(other, Rule):
            return False
        return self.origin == other.origin and self.expansion == other.expansion



from copy import copy

try:  ##

    has_interegular = bool(interegular)
except NameError:
    has_interegular = False

class Pattern(Serialize, ABC):
    #--

    value: str
    flags: Collection[str]
    raw: Optional[str]
    type: ClassVar[str]

    def __init__(self, value: str, flags: Collection[str] = (), raw: Optional[str] = None) -> None:
        self.value = value
        self.flags = frozenset(flags)
        self.raw = raw

    def __repr__(self):
        return repr(self.to_regexp())

    ##

    def __hash__(self):
        return hash((type(self), self.value, self.flags))

    def __eq__(self, other):
        return type(self) == type(other) and self.value == other.value and self.flags == other.flags

    @abstractmethod
    def to_regexp(self) -> str:
        raise NotImplementedError()

    @property
    @abstractmethod
    def min_width(self) -> int:
        raise NotImplementedError()

    @property
    @abstractmethod
    def max_width(self) -> int:
        raise NotImplementedError()

    def _get_flags(self, value):
        for f in self.flags:
            value = ('(?%s:%s)' % (f, value))
        return value


class PatternStr(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw'

    type: ClassVar[str] = "str"

    def to_regexp(self) -> str:
        return self._get_flags(re.escape(self.value))

    @property
    def min_width(self) -> int:
        return len(self.value)

    @property
    def max_width(self) -> int:
        return len(self.value)


class PatternRE(Pattern):
    __serialize_fields__ = 'value', 'flags', 'raw', '_width'

    type: ClassVar[str] = "re"

    def to_regexp(self) -> str:
        return self._get_flags(self.value)

    _width = None
    def _get_width(self):
        if self._width is None:
            self._width = get_regexp_width(self.to_regexp())
        return self._width

    @property
    def min_width(self) -> int:
        return self._get_width()[0]

    @property
    def max_width(self) -> int:
        return self._get_width()[1]


class TerminalDef(Serialize):
    #--
    __serialize_fields__ = 'name', 'pattern', 'priority'
    __serialize_namespace__ = PatternStr, PatternRE

    name: str
    pattern: Pattern
    priority: int

    def __init__(self, name: str, pattern: Pattern, priority: int = TOKEN_DEFAULT_PRIORITY) -> None:
        assert isinstance(pattern, Pattern), pattern
        self.name = name
        self.pattern = pattern
        self.priority = priority

    def __repr__(self):
        return '%s(%r, %r)' % (type(self).__name__, self.name, self.pattern)

    def user_repr(self) -> str:
        if self.name.startswith('__'):  ##

            return self.pattern.raw or self.name
        else:
            return self.name

_T = TypeVar('_T', bound="Token")

class Token(str):
    #--
    __slots__ = ('type', 'start_pos', 'value', 'line', 'column', 'end_line', 'end_column', 'end_pos')

    __match_args__ = ('type', 'value')

    type: str
    start_pos: Optional[int]
    value: Any
    line: Optional[int]
    column: Optional[int]
    end_line: Optional[int]
    end_column: Optional[int]
    end_pos: Optional[int]


    @overload
    def __new__(
            cls,
            type: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':
        ...

    @overload
    def __new__(
            cls,
            type_: str,
            value: Any,
            start_pos: Optional[int] = None,
            line: Optional[int] = None,
            column: Optional[int] = None,
            end_line: Optional[int] = None,
            end_column: Optional[int] = None,
            end_pos: Optional[int] = None
    ) -> 'Token':        ...

    def __new__(cls, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return cls._future_new(*args, **kwargs)


    @classmethod
    def _future_new(cls, type, value, start_pos=None, line=None, column=None, end_line=None, end_column=None, end_pos=None):
        inst = super(Token, cls).__new__(cls, value)

        inst.type = type
        inst.start_pos = start_pos
        inst.value = value
        inst.line = line
        inst.column = column
        inst.end_line = end_line
        inst.end_column = end_column
        inst.end_pos = end_pos
        return inst

    @overload
    def update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    @overload
    def update(self, type_: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        ...

    def update(self, *args, **kwargs):
        if "type_" in kwargs:
            warnings.warn("`type_` is deprecated use `type` instead", DeprecationWarning)

            if "type" in kwargs:
                raise TypeError("Error: using both 'type' and the deprecated 'type_' as arguments.")
            kwargs["type"] = kwargs.pop("type_")

        return self._future_update(*args, **kwargs)

    def _future_update(self, type: Optional[str] = None, value: Optional[Any] = None) -> 'Token':
        return Token.new_borrow_pos(
            type if type is not None else self.type,
            value if value is not None else self.value,
            self
        )

    @classmethod
    def new_borrow_pos(cls: Type[_T], type_: str, value: Any, borrow_t: 'Token') -> _T:
        return cls(type_, value, borrow_t.start_pos, borrow_t.line, borrow_t.column, borrow_t.end_line, borrow_t.end_column, borrow_t.end_pos)

    def __reduce__(self):
        return (self.__class__, (self.type, self.value, self.start_pos, self.line, self.column))

    def __repr__(self):
        return 'Token(%r, %r)' % (self.type, self.value)

    def __deepcopy__(self, memo):
        return Token(self.type, self.value, self.start_pos, self.line, self.column)

    def __eq__(self, other):
        if isinstance(other, Token) and self.type != other.type:
            return False

        return str.__eq__(self, other)

    __hash__ = str.__hash__


class LineCounter:
    #--

    __slots__ = 'char_pos', 'line', 'column', 'line_start_pos', 'newline_char'

    def __init__(self, newline_char):
        self.newline_char = newline_char
        self.char_pos = 0
        self.line = 1
        self.column = 1
        self.line_start_pos = 0

    def __eq__(self, other):
        if not isinstance(other, LineCounter):
            return NotImplemented

        return self.char_pos == other.char_pos and self.newline_char == other.newline_char

    def feed(self, token: Token, test_newline=True):
        #--
        if test_newline:
            newlines = token.count(self.newline_char)
            if newlines:
                self.line += newlines
                self.line_start_pos = self.char_pos + token.rindex(self.newline_char) + 1

        self.char_pos += len(token)
        self.column = self.char_pos - self.line_start_pos + 1


class UnlessCallback:
    def __init__(self, scanner):
        self.scanner = scanner

    def __call__(self, t):
        res = self.scanner.match(t.value, 0)
        if res:
            _value, t.type = res
        return t


class CallChain:
    def __init__(self, callback1, callback2, cond):
        self.callback1 = callback1
        self.callback2 = callback2
        self.cond = cond

    def __call__(self, t):
        t2 = self.callback1(t)
        return self.callback2(t) if self.cond(t2) else t2


def _get_match(re_, regexp, s, flags):
    m = re_.match(regexp, s, flags)
    if m:
        return m.group(0)

def _create_unless(terminals, g_regex_flags, re_, use_bytes):
    tokens_by_type = classify(terminals, lambda t: type(t.pattern))
    assert len(tokens_by_type) <= 2, tokens_by_type.keys()
    embedded_strs = set()
    callback = {}
    for retok in tokens_by_type.get(PatternRE, []):
        unless = []
        for strtok in tokens_by_type.get(PatternStr, []):
            if strtok.priority != retok.priority:
                continue
            s = strtok.pattern.value
            if s == _get_match(re_, retok.pattern.to_regexp(), s, g_regex_flags):
                unless.append(strtok)
                if strtok.pattern.flags <= retok.pattern.flags:
                    embedded_strs.add(strtok)
        if unless:
            callback[retok.name] = UnlessCallback(Scanner(unless, g_regex_flags, re_, match_whole=True, use_bytes=use_bytes))

    new_terminals = [t for t in terminals if t not in embedded_strs]
    return new_terminals, callback


class Scanner:
    def __init__(self, terminals, g_regex_flags, re_, use_bytes, match_whole=False):
        self.terminals = terminals
        self.g_regex_flags = g_regex_flags
        self.re_ = re_
        self.use_bytes = use_bytes
        self.match_whole = match_whole

        self.allowed_types = {t.name for t in self.terminals}

        self._mres = self._build_mres(terminals, len(terminals))

    def _build_mres(self, terminals, max_size):
        ##

        ##

        ##

        postfix = '$' if self.match_whole else ''
        mres = []
        while terminals:
            pattern = u'|'.join(u'(?P<%s>%s)' % (t.name, t.pattern.to_regexp() + postfix) for t in terminals[:max_size])
            if self.use_bytes:
                pattern = pattern.encode('latin-1')
            try:
                mre = self.re_.compile(pattern, self.g_regex_flags)
            except AssertionError:  ##

                return self._build_mres(terminals, max_size // 2)

            mres.append(mre)
            terminals = terminals[max_size:]
        return mres

    def match(self, text, pos):
        for mre in self._mres:
            m = mre.match(text, pos)
            if m:
                return m.group(0), m.lastgroup


def _regexp_has_newline(r: str):
    #--
    return '\n' in r or '\\n' in r or '\\s' in r or '[^' in r or ('(?s' in r and '.' in r)


class LexerState:
    #--

    __slots__ = 'text', 'line_ctr', 'last_token'

    text: str
    line_ctr: LineCounter
    last_token: Optional[Token]

    def __init__(self, text: str, line_ctr: Optional[LineCounter]=None, last_token: Optional[Token]=None):
        self.text = text
        self.line_ctr = line_ctr or LineCounter(b'\n' if isinstance(text, bytes) else '\n')
        self.last_token = last_token

    def __eq__(self, other):
        if not isinstance(other, LexerState):
            return NotImplemented

        return self.text is other.text and self.line_ctr == other.line_ctr and self.last_token == other.last_token

    def __copy__(self):
        return type(self)(self.text, copy(self.line_ctr), self.last_token)


class LexerThread:
    #--

    def __init__(self, lexer: 'Lexer', lexer_state: LexerState):
        self.lexer = lexer
        self.state = lexer_state

    @classmethod
    def from_text(cls, lexer: 'Lexer', text: str) -> 'LexerThread':
        return cls(lexer, LexerState(text))

    def lex(self, parser_state):
        return self.lexer.lex(self.state, parser_state)

    def __copy__(self):
        return type(self)(self.lexer, copy(self.state))

    _Token = Token


_Callback = Callable[[Token], Token]

class Lexer(ABC):
    #--
    @abstractmethod
    def lex(self, lexer_state: LexerState, parser_state: Any) -> Iterator[Token]:
        return NotImplemented

    def make_lexer_state(self, text):
        #--
        return LexerState(text)


def _check_regex_collisions(terminal_to_regexp: Dict[TerminalDef, str], comparator, strict_mode, max_collisions_to_show=8):
    if not comparator:
        comparator = interegular.Comparator.from_regexes(terminal_to_regexp)

    ##

    ##

    max_time = 2 if strict_mode else 0.2

    ##

    if comparator.count_marked_pairs() >= max_collisions_to_show:
        return
    for group in classify(terminal_to_regexp, lambda t: t.priority).values():
        for a, b in comparator.check(group, skip_marked=True):
            assert a.priority == b.priority
            ##

            comparator.mark(a, b)

            ##

            message = f"Collision between Terminals {a.name} and {b.name}. "
            try:
                example = comparator.get_example_overlap(a, b, max_time).format_multiline()
            except ValueError:
                ##

                example = "No example could be found fast enough. However, the collision does still exists"
            if strict_mode:
                raise LexError(f"{message}\n{example}")
            logger.warning("%s The lexer will choose between them arbitrarily.\n%s", message, example)
            if comparator.count_marked_pairs() >= max_collisions_to_show:
                logger.warning("Found 8 regex collisions, will not check for more.")
                return


class AbstractBasicLexer(Lexer):
    terminals_by_name: Dict[str, TerminalDef]

    @abstractmethod
    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        ...

    @abstractmethod
    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        ...

    def lex(self, state: LexerState, parser_state: Any) -> Iterator[Token]:
        with suppress(EOFError):
            while True:
                yield self.next_token(state, parser_state)


class BasicLexer(AbstractBasicLexer):
    terminals: Collection[TerminalDef]
    ignore_types: FrozenSet[str]
    newline_types: FrozenSet[str]
    user_callbacks: Dict[str, _Callback]
    callback: Dict[str, _Callback]
    re: ModuleType

    def __init__(self, conf: 'LexerConf', comparator=None) -> None:
        terminals = list(conf.terminals)
        assert all(isinstance(t, TerminalDef) for t in terminals), terminals

        self.re = conf.re_module

        if not conf.skip_validation:
            ##

            terminal_to_regexp = {}
            for t in terminals:
                regexp = t.pattern.to_regexp()
                try:
                    self.re.compile(regexp, conf.g_regex_flags)
                except self.re.error:
                    raise LexError("Cannot compile token %s: %s" % (t.name, t.pattern))

                if t.pattern.min_width == 0:
                    raise LexError("Lexer does not allow zero-width terminals. (%s: %s)" % (t.name, t.pattern))
                if t.pattern.type == "re":
                    terminal_to_regexp[t] = regexp

            if not (set(conf.ignore) <= {t.name for t in terminals}):
                raise LexError("Ignore terminals are not defined: %s" % (set(conf.ignore) - {t.name for t in terminals}))

            if has_interegular:
                _check_regex_collisions(terminal_to_regexp, comparator, conf.strict)
            elif conf.strict:
                raise LexError("interegular must be installed for strict mode. Use `pip install 'lark[interegular]'`.")

        ##

        self.newline_types = frozenset(t.name for t in terminals if _regexp_has_newline(t.pattern.to_regexp()))
        self.ignore_types = frozenset(conf.ignore)

        terminals.sort(key=lambda x: (-x.priority, -x.pattern.max_width, -len(x.pattern.value), x.name))
        self.terminals = terminals
        self.user_callbacks = conf.callbacks
        self.g_regex_flags = conf.g_regex_flags
        self.use_bytes = conf.use_bytes
        self.terminals_by_name = conf.terminals_by_name

        self._scanner = None

    def _build_scanner(self):
        terminals, self.callback = _create_unless(self.terminals, self.g_regex_flags, self.re, self.use_bytes)
        assert all(self.callback.values())

        for type_, f in self.user_callbacks.items():
            if type_ in self.callback:
                ##

                self.callback[type_] = CallChain(self.callback[type_], f, lambda t: t.type == type_)
            else:
                self.callback[type_] = f

        self._scanner = Scanner(terminals, self.g_regex_flags, self.re, self.use_bytes)

    @property
    def scanner(self):
        if self._scanner is None:
            self._build_scanner()
        return self._scanner

    def match(self, text, pos):
        return self.scanner.match(text, pos)

    def next_token(self, lex_state: LexerState, parser_state: Any = None) -> Token:
        line_ctr = lex_state.line_ctr
        while line_ctr.char_pos < len(lex_state.text):
            res = self.match(lex_state.text, line_ctr.char_pos)
            if not res:
                allowed = self.scanner.allowed_types - self.ignore_types
                if not allowed:
                    allowed = {"<END-OF-FILE>"}
                raise UnexpectedCharacters(lex_state.text, line_ctr.char_pos, line_ctr.line, line_ctr.column,
                                           allowed=allowed, token_history=lex_state.last_token and [lex_state.last_token],
                                           state=parser_state, terminals_by_name=self.terminals_by_name)

            value, type_ = res

            ignored = type_ in self.ignore_types
            t = None
            if not ignored or type_ in self.callback:
                t = Token(type_, value, line_ctr.char_pos, line_ctr.line, line_ctr.column)
            line_ctr.feed(value, type_ in self.newline_types)
            if t is not None:
                t.end_line = line_ctr.line
                t.end_column = line_ctr.column
                t.end_pos = line_ctr.char_pos
                if t.type in self.callback:
                    t = self.callback[t.type](t)
                if not ignored:
                    if not isinstance(t, Token):
                        raise LexError("Callbacks must return a token (returned %r)" % t)
                    lex_state.last_token = t
                    return t

        ##

        raise EOFError(self)


class ContextualLexer(Lexer):
    lexers: Dict[int, AbstractBasicLexer]
    root_lexer: AbstractBasicLexer

    BasicLexer: Type[AbstractBasicLexer] = BasicLexer

    def __init__(self, conf: 'LexerConf', states: Dict[int, Collection[str]], always_accept: Collection[str]=()) -> None:
        terminals = list(conf.terminals)
        terminals_by_name = conf.terminals_by_name

        trad_conf = copy(conf)
        trad_conf.terminals = terminals

        if has_interegular and not conf.skip_validation:
            comparator = interegular.Comparator.from_regexes({t: t.pattern.to_regexp() for t in terminals})
        else:
            comparator = None
        lexer_by_tokens: Dict[FrozenSet[str], AbstractBasicLexer] = {}
        self.lexers = {}
        for state, accepts in states.items():
            key = frozenset(accepts)
            try:
                lexer = lexer_by_tokens[key]
            except KeyError:
                accepts = set(accepts) | set(conf.ignore) | set(always_accept)
                lexer_conf = copy(trad_conf)
                lexer_conf.terminals = [terminals_by_name[n] for n in accepts if n in terminals_by_name]
                lexer = self.BasicLexer(lexer_conf, comparator)
                lexer_by_tokens[key] = lexer

            self.lexers[state] = lexer

        assert trad_conf.terminals is terminals
        trad_conf.skip_validation = True  ##

        self.root_lexer = self.BasicLexer(trad_conf, comparator)

    def lex(self, lexer_state: LexerState, parser_state: 'ParserState') -> Iterator[Token]:
        try:
            while True:
                lexer = self.lexers[parser_state.position]
                yield lexer.next_token(lexer_state, parser_state)
        except EOFError:
            pass
        except UnexpectedCharacters as e:
            ##

            ##

            try:
                last_token = lexer_state.last_token  ##

                token = self.root_lexer.next_token(lexer_state, parser_state)
                raise UnexpectedToken(token, e.allowed, state=parser_state, token_history=[last_token], terminals_by_name=self.root_lexer.terminals_by_name)
            except UnexpectedCharacters:
                raise e  ##




_ParserArgType: 'TypeAlias' = 'Literal["earley", "lalr", "cyk", "auto"]'
_LexerArgType: 'TypeAlias' = 'Union[Literal["auto", "basic", "contextual", "dynamic", "dynamic_complete"], Type[Lexer]]'
_LexerCallback = Callable[[Token], Token]
ParserCallbacks = Dict[str, Callable]

class LexerConf(Serialize):
    __serialize_fields__ = 'terminals', 'ignore', 'g_regex_flags', 'use_bytes', 'lexer_type'
    __serialize_namespace__ = TerminalDef,

    terminals: Collection[TerminalDef]
    re_module: ModuleType
    ignore: Collection[str]
    postlex: 'Optional[PostLex]'
    callbacks: Dict[str, _LexerCallback]
    g_regex_flags: int
    skip_validation: bool
    use_bytes: bool
    lexer_type: Optional[_LexerArgType]
    strict: bool

    def __init__(self, terminals: Collection[TerminalDef], re_module: ModuleType, ignore: Collection[str]=(), postlex: 'Optional[PostLex]'=None,
                 callbacks: Optional[Dict[str, _LexerCallback]]=None, g_regex_flags: int=0, skip_validation: bool=False, use_bytes: bool=False, strict: bool=False):
        self.terminals = terminals
        self.terminals_by_name = {t.name: t for t in self.terminals}
        assert len(self.terminals) == len(self.terminals_by_name)
        self.ignore = ignore
        self.postlex = postlex
        self.callbacks = callbacks or {}
        self.g_regex_flags = g_regex_flags
        self.re_module = re_module
        self.skip_validation = skip_validation
        self.use_bytes = use_bytes
        self.strict = strict
        self.lexer_type = None

    def _deserialize(self):
        self.terminals_by_name = {t.name: t for t in self.terminals}

    def __deepcopy__(self, memo=None):
        return type(self)(
            deepcopy(self.terminals, memo),
            self.re_module,
            deepcopy(self.ignore, memo),
            deepcopy(self.postlex, memo),
            deepcopy(self.callbacks, memo),
            deepcopy(self.g_regex_flags, memo),
            deepcopy(self.skip_validation, memo),
            deepcopy(self.use_bytes, memo),
        )

class ParserConf(Serialize):
    __serialize_fields__ = 'rules', 'start', 'parser_type'

    rules: List['Rule']
    callbacks: ParserCallbacks
    start: List[str]
    parser_type: _ParserArgType

    def __init__(self, rules: List['Rule'], callbacks: ParserCallbacks, start: List[str]):
        assert isinstance(start, list)
        self.rules = rules
        self.callbacks = callbacks
        self.start = start


from functools import partial, wraps
from itertools import product


class ExpandSingleChild:
    def __init__(self, node_builder):
        self.node_builder = node_builder

    def __call__(self, children):
        if len(children) == 1:
            return children[0]
        else:
            return self.node_builder(children)



class PropagatePositions:
    def __init__(self, node_builder, node_filter=None):
        self.node_builder = node_builder
        self.node_filter = node_filter

    def __call__(self, children):
        res = self.node_builder(children)

        if isinstance(res, Tree):
            ##

            ##

            ##

            ##


            res_meta = res.meta

            first_meta = self._pp_get_meta(children)
            if first_meta is not None:
                if not hasattr(res_meta, 'line'):
                    ##

                    res_meta.line = getattr(first_meta, 'container_line', first_meta.line)
                    res_meta.column = getattr(first_meta, 'container_column', first_meta.column)
                    res_meta.start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)
                    res_meta.empty = False

                res_meta.container_line = getattr(first_meta, 'container_line', first_meta.line)
                res_meta.container_column = getattr(first_meta, 'container_column', first_meta.column)
                res_meta.container_start_pos = getattr(first_meta, 'container_start_pos', first_meta.start_pos)

            last_meta = self._pp_get_meta(reversed(children))
            if last_meta is not None:
                if not hasattr(res_meta, 'end_line'):
                    res_meta.end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                    res_meta.end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                    res_meta.end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)
                    res_meta.empty = False

                res_meta.container_end_line = getattr(last_meta, 'container_end_line', last_meta.end_line)
                res_meta.container_end_column = getattr(last_meta, 'container_end_column', last_meta.end_column)
                res_meta.container_end_pos = getattr(last_meta, 'container_end_pos', last_meta.end_pos)

        return res

    def _pp_get_meta(self, children):
        for c in children:
            if self.node_filter is not None and not self.node_filter(c):
                continue
            if isinstance(c, Tree):
                if not c.meta.empty:
                    return c.meta
            elif isinstance(c, Token):
                return c
            elif hasattr(c, '__lark_meta__'):
                return c.__lark_meta__()

def make_propagate_positions(option):
    if callable(option):
        return partial(PropagatePositions, node_filter=option)
    elif option is True:
        return PropagatePositions
    elif option is False:
        return None

    raise ConfigurationError('Invalid option for propagate_positions: %r' % option)


class ChildFilter:
    def __init__(self, to_include, append_none, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include
        self.append_none = append_none

    def __call__(self, children):
        filtered = []

        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                filtered += children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR(ChildFilter):
    #--

    def __call__(self, children):
        filtered = []
        for i, to_expand, add_none in self.to_include:
            if add_none:
                filtered += [None] * add_none
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])

        if self.append_none:
            filtered += [None] * self.append_none

        return self.node_builder(filtered)


class ChildFilterLALR_NoPlaceholders(ChildFilter):
    #--
    def __init__(self, to_include, node_builder):
        self.node_builder = node_builder
        self.to_include = to_include

    def __call__(self, children):
        filtered = []
        for i, to_expand in self.to_include:
            if to_expand:
                if filtered:
                    filtered += children[i].children
                else:   ##

                    filtered = children[i].children
            else:
                filtered.append(children[i])
        return self.node_builder(filtered)


def _should_expand(sym):
    return not sym.is_term and sym.name.startswith('_')


def maybe_create_child_filter(expansion, keep_all_tokens, ambiguous, _empty_indices: List[bool]):
    ##

    if _empty_indices:
        assert _empty_indices.count(False) == len(expansion)
        s = ''.join(str(int(b)) for b in _empty_indices)
        empty_indices = [len(ones) for ones in s.split('0')]
        assert len(empty_indices) == len(expansion)+1, (empty_indices, len(expansion))
    else:
        empty_indices = [0] * (len(expansion)+1)

    to_include = []
    nones_to_add = 0
    for i, sym in enumerate(expansion):
        nones_to_add += empty_indices[i]
        if keep_all_tokens or not (sym.is_term and sym.filter_out):
            to_include.append((i, _should_expand(sym), nones_to_add))
            nones_to_add = 0

    nones_to_add += empty_indices[len(expansion)]

    if _empty_indices or len(to_include) < len(expansion) or any(to_expand for i, to_expand,_ in to_include):
        if _empty_indices or ambiguous:
            return partial(ChildFilter if ambiguous else ChildFilterLALR, to_include, nones_to_add)
        else:
            ##

            return partial(ChildFilterLALR_NoPlaceholders, [(i, x) for i,x,_ in to_include])


class AmbiguousExpander:
    #--
    def __init__(self, to_expand, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class
        self.to_expand = to_expand

    def __call__(self, children):
        def _is_ambig_tree(t):
            return hasattr(t, 'data') and t.data == '_ambig'

        ##

        ##

        ##

        ##

        ambiguous = []
        for i, child in enumerate(children):
            if _is_ambig_tree(child):
                if i in self.to_expand:
                    ambiguous.append(i)

                child.expand_kids_by_data('_ambig')

        if not ambiguous:
            return self.node_builder(children)

        expand = [child.children if i in ambiguous else (child,) for i, child in enumerate(children)]
        return self.tree_class('_ambig', [self.node_builder(list(f)) for f in product(*expand)])


def maybe_create_ambiguous_expander(tree_class, expansion, keep_all_tokens):
    to_expand = [i for i, sym in enumerate(expansion)
                 if keep_all_tokens or ((not (sym.is_term and sym.filter_out)) and _should_expand(sym))]
    if to_expand:
        return partial(AmbiguousExpander, to_expand, tree_class)


class AmbiguousIntermediateExpander:
    #--

    def __init__(self, tree_class, node_builder):
        self.node_builder = node_builder
        self.tree_class = tree_class

    def __call__(self, children):
        def _is_iambig_tree(child):
            return hasattr(child, 'data') and child.data == '_iambig'

        def _collapse_iambig(children):
            #--

            ##

            ##

            if children and _is_iambig_tree(children[0]):
                iambig_node = children[0]
                result = []
                for grandchild in iambig_node.children:
                    collapsed = _collapse_iambig(grandchild.children)
                    if collapsed:
                        for child in collapsed:
                            child.children += children[1:]
                        result += collapsed
                    else:
                        new_tree = self.tree_class('_inter', grandchild.children + children[1:])
                        result.append(new_tree)
                return result

        collapsed = _collapse_iambig(children)
        if collapsed:
            processed_nodes = [self.node_builder(c.children) for c in collapsed]
            return self.tree_class('_ambig', processed_nodes)

        return self.node_builder(children)



def inplace_transformer(func):
    @wraps(func)
    def f(children):
        ##

        tree = Tree(func.__name__, children)
        return func(tree)
    return f


def apply_visit_wrapper(func, name, wrapper):
    if wrapper is _vargs_meta or wrapper is _vargs_meta_inline:
        raise NotImplementedError("Meta args not supported for internal transformer")

    @wraps(func)
    def f(children):
        return wrapper(func, name, children, None)
    return f


class ParseTreeBuilder:
    def __init__(self, rules, tree_class, propagate_positions=False, ambiguous=False, maybe_placeholders=False):
        self.tree_class = tree_class
        self.propagate_positions = propagate_positions
        self.ambiguous = ambiguous
        self.maybe_placeholders = maybe_placeholders

        self.rule_builders = list(self._init_builders(rules))

    def _init_builders(self, rules):
        propagate_positions = make_propagate_positions(self.propagate_positions)

        for rule in rules:
            options = rule.options
            keep_all_tokens = options.keep_all_tokens
            expand_single_child = options.expand1

            wrapper_chain = list(filter(None, [
                (expand_single_child and not rule.alias) and ExpandSingleChild,
                maybe_create_child_filter(rule.expansion, keep_all_tokens, self.ambiguous, options.empty_indices if self.maybe_placeholders else None),
                propagate_positions,
                self.ambiguous and maybe_create_ambiguous_expander(self.tree_class, rule.expansion, keep_all_tokens),
                self.ambiguous and partial(AmbiguousIntermediateExpander, self.tree_class)
            ]))

            yield rule, wrapper_chain

    def create_callback(self, transformer=None):
        callbacks = {}

        default_handler = getattr(transformer, '__default__', None)
        if default_handler:
            def default_callback(data, children):
                return default_handler(data, children, None)
        else:
            default_callback = self.tree_class

        for rule, wrapper_chain in self.rule_builders:

            user_callback_name = rule.alias or rule.options.template_source or rule.origin.name
            try:
                f = getattr(transformer, user_callback_name)
                wrapper = getattr(f, 'visit_wrapper', None)
                if wrapper is not None:
                    f = apply_visit_wrapper(f, user_callback_name, wrapper)
                elif isinstance(transformer, Transformer_InPlace):
                    f = inplace_transformer(f)
            except AttributeError:
                f = partial(default_callback, user_callback_name)

            for w in wrapper_chain:
                f = w(f)

            if rule in callbacks:
                raise GrammarError("Rule '%s' already exists" % (rule,))

            callbacks[rule] = f

        return callbacks



class Action:
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return self.name
    def __repr__(self):
        return str(self)

Shift = Action('Shift')
Reduce = Action('Reduce')

StateT = TypeVar("StateT")

class ParseTableBase(Generic[StateT]):
    states: Dict[StateT, Dict[str, Tuple]]
    start_states: Dict[str, StateT]
    end_states: Dict[str, StateT]

    def __init__(self, states, start_states, end_states):
        self.states = states
        self.start_states = start_states
        self.end_states = end_states

    def serialize(self, memo):
        tokens = Enumerator()

        states = {
            state: {tokens.get(token): ((1, arg.serialize(memo)) if action is Reduce else (0, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in self.states.items()
        }

        return {
            'tokens': tokens.reversed(),
            'states': states,
            'start_states': self.start_states,
            'end_states': self.end_states,
        }

    @classmethod
    def deserialize(cls, data, memo):
        tokens = data['tokens']
        states = {
            state: {tokens[token]: ((Reduce, Rule.deserialize(arg, memo)) if action==1 else (Shift, arg))
                    for token, (action, arg) in actions.items()}
            for state, actions in data['states'].items()
        }
        return cls(states, data['start_states'], data['end_states'])

class ParseTable(ParseTableBase['State']):
    #--
    pass


class IntParseTable(ParseTableBase[int]):
    #--

    @classmethod
    def from_ParseTable(cls, parse_table: ParseTable):
        enum = list(parse_table.states)
        state_to_idx: Dict['State', int] = {s:i for i,s in enumerate(enum)}
        int_states = {}

        for s, la in parse_table.states.items():
            la = {k:(v[0], state_to_idx[v[1]]) if v[0] is Shift else v
                  for k,v in la.items()}
            int_states[ state_to_idx[s] ] = la


        start_states = {start:state_to_idx[s] for start, s in parse_table.start_states.items()}
        end_states = {start:state_to_idx[s] for start, s in parse_table.end_states.items()}
        return cls(int_states, start_states, end_states)



class ParseConf(Generic[StateT]):
    __slots__ = 'parse_table', 'callbacks', 'start', 'start_state', 'end_state', 'states'

    parse_table: ParseTableBase[StateT]
    callbacks: ParserCallbacks
    start: str

    start_state: StateT
    end_state: StateT
    states: Dict[StateT, Dict[str, tuple]]

    def __init__(self, parse_table: ParseTableBase[StateT], callbacks: ParserCallbacks, start: str):
        self.parse_table = parse_table

        self.start_state = self.parse_table.start_states[start]
        self.end_state = self.parse_table.end_states[start]
        self.states = self.parse_table.states

        self.callbacks = callbacks
        self.start = start

class ParserState(Generic[StateT]):
    __slots__ = 'parse_conf', 'lexer', 'state_stack', 'value_stack'

    parse_conf: ParseConf[StateT]
    lexer: LexerThread
    state_stack: List[StateT]
    value_stack: list

    def __init__(self, parse_conf: ParseConf[StateT], lexer: LexerThread, state_stack=None, value_stack=None):
        self.parse_conf = parse_conf
        self.lexer = lexer
        self.state_stack = state_stack or [self.parse_conf.start_state]
        self.value_stack = value_stack or []

    @property
    def position(self) -> StateT:
        return self.state_stack[-1]

    ##

    def __eq__(self, other) -> bool:
        if not isinstance(other, ParserState):
            return NotImplemented
        return len(self.state_stack) == len(other.state_stack) and self.position == other.position

    def __copy__(self):
        return self.copy()

    def copy(self, deepcopy_values=True) -> 'ParserState[StateT]':
        return type(self)(
            self.parse_conf,
            self.lexer, ##

            copy(self.state_stack),
            deepcopy(self.value_stack) if deepcopy_values else copy(self.value_stack),
        )

    def feed_token(self, token: Token, is_end=False) -> Any:
        state_stack = self.state_stack
        value_stack = self.value_stack
        states = self.parse_conf.states
        end_state = self.parse_conf.end_state
        callbacks = self.parse_conf.callbacks

        while True:
            state = state_stack[-1]
            try:
                action, arg = states[state][token.type]
            except KeyError:
                expected = {s for s in states[state].keys() if s.isupper()}
                raise UnexpectedToken(token, expected, state=self, interactive_parser=None)

            assert arg != end_state

            if action is Shift:
                ##

                assert not is_end
                state_stack.append(arg)
                value_stack.append(token if token.type not in callbacks else callbacks[token.type](token))
                return
            else:
                ##

                rule = arg
                size = len(rule.expansion)
                if size:
                    s = value_stack[-size:]
                    del state_stack[-size:]
                    del value_stack[-size:]
                else:
                    s = []

                value = callbacks[rule](s) if callbacks else s

                _action, new_state = states[state_stack[-1]][rule.origin.name]
                assert _action is Shift
                state_stack.append(new_state)
                value_stack.append(value)

                if is_end and state_stack[-1] == end_state:
                    return value_stack[-1]


class LALR_Parser(Serialize):
    def __init__(self, parser_conf: ParserConf, debug: bool=False, strict: bool=False):
        analysis = LALR_Analyzer(parser_conf, debug=debug, strict=strict)
        analysis.compute_lalr()
        callbacks = parser_conf.callbacks

        self._parse_table = analysis.parse_table
        self.parser_conf = parser_conf
        self.parser = _Parser(analysis.parse_table, callbacks, debug)

    @classmethod
    def deserialize(cls, data, memo, callbacks, debug=False):
        inst = cls.__new__(cls)
        inst._parse_table = IntParseTable.deserialize(data, memo)
        inst.parser = _Parser(inst._parse_table, callbacks, debug)
        return inst

    def serialize(self, memo: Any = None) -> Dict[str, Any]:
        return self._parse_table.serialize(memo)

    def parse_interactive(self, lexer: LexerThread, start: str):
        return self.parser.parse(lexer, start, start_interactive=True)

    def parse(self, lexer, start, on_error=None):
        try:
            return self.parser.parse(lexer, start)
        except UnexpectedInput as e:
            if on_error is None:
                raise

            while True:
                if isinstance(e, UnexpectedCharacters):
                    s = e.interactive_parser.lexer_thread.state
                    p = s.line_ctr.char_pos

                if not on_error(e):
                    raise e

                if isinstance(e, UnexpectedCharacters):
                    ##

                    if p == s.line_ctr.char_pos:
                        s.line_ctr.feed(s.text[p:p+1])

                try:
                    return e.interactive_parser.resume_parse()
                except UnexpectedToken as e2:
                    if (isinstance(e, UnexpectedToken)
                        and e.token.type == e2.token.type == '$END'
                        and e.interactive_parser == e2.interactive_parser):
                        ##

                        raise e2
                    e = e2
                except UnexpectedCharacters as e2:
                    e = e2


class _Parser:
    parse_table: ParseTableBase
    callbacks: ParserCallbacks
    debug: bool

    def __init__(self, parse_table: ParseTableBase, callbacks: ParserCallbacks, debug: bool=False):
        self.parse_table = parse_table
        self.callbacks = callbacks
        self.debug = debug

    def parse(self, lexer: LexerThread, start: str, value_stack=None, state_stack=None, start_interactive=False):
        parse_conf = ParseConf(self.parse_table, self.callbacks, start)
        parser_state = ParserState(parse_conf, lexer, state_stack, value_stack)
        if start_interactive:
            return InteractiveParser(self, parser_state, parser_state.lexer)
        return self.parse_from_state(parser_state)


    def parse_from_state(self, state: ParserState, last_token: Optional[Token]=None):
        #--
        try:
            token = last_token
            for token in state.lexer.lex(state):
                assert token is not None
                state.feed_token(token)

            end_token = Token.new_borrow_pos('$END', '', token) if token else Token('$END', '', 0, 1, 1)
            return state.feed_token(end_token, True)
        except UnexpectedInput as e:
            try:
                e.interactive_parser = InteractiveParser(self, state, state.lexer)
            except NameError:
                pass
            raise e
        except Exception as e:
            if self.debug:
                print("")
                print("STATE STACK DUMP")
                print("----------------")
                for i, s in enumerate(state.state_stack):
                    print('%d)' % i , s)
                print("")

            raise


class InteractiveParser:
    #--
    def __init__(self, parser, parser_state: ParserState, lexer_thread: LexerThread):
        self.parser = parser
        self.parser_state = parser_state
        self.lexer_thread = lexer_thread
        self.result = None

    @property
    def lexer_state(self) -> LexerThread:
        warnings.warn("lexer_state will be removed in subsequent releases. Use lexer_thread instead.", DeprecationWarning)
        return self.lexer_thread

    def feed_token(self, token: Token):
        #--
        return self.parser_state.feed_token(token, token.type == '$END')

    def iter_parse(self) -> Iterator[Token]:
        #--
        for token in self.lexer_thread.lex(self.parser_state):
            yield token
            self.result = self.feed_token(token)

    def exhaust_lexer(self) -> List[Token]:
        #--
        return list(self.iter_parse())


    def feed_eof(self, last_token=None):
        #--
        eof = Token.new_borrow_pos('$END', '', last_token) if last_token is not None else self.lexer_thread._Token('$END', '', 0, 1, 1)
        return self.feed_token(eof)


    def __copy__(self):
        #--
        return self.copy()

    def copy(self, deepcopy_values=True):
        return type(self)(
            self.parser,
            self.parser_state.copy(deepcopy_values=deepcopy_values),
            copy(self.lexer_thread),
        )

    def __eq__(self, other):
        if not isinstance(other, InteractiveParser):
            return False

        return self.parser_state == other.parser_state and self.lexer_thread == other.lexer_thread

    def as_immutable(self):
        #--
        p = copy(self)
        return ImmutableInteractiveParser(p.parser, p.parser_state, p.lexer_thread)

    def pretty(self):
        #--
        out = ["Parser choices:"]
        for k, v in self.choices().items():
            out.append('\t- %s -> %r' % (k, v))
        out.append('stack size: %s' % len(self.parser_state.state_stack))
        return '\n'.join(out)

    def choices(self):
        #--
        return self.parser_state.parse_conf.parse_table.states[self.parser_state.position]

    def accepts(self):
        #--
        accepts = set()
        conf_no_callbacks = copy(self.parser_state.parse_conf)
        ##

        ##

        conf_no_callbacks.callbacks = {}
        for t in self.choices():
            if t.isupper(): ##

                new_cursor = self.copy(deepcopy_values=False)
                new_cursor.parser_state.parse_conf = conf_no_callbacks
                try:
                    new_cursor.feed_token(self.lexer_thread._Token(t, ''))
                except UnexpectedToken:
                    pass
                else:
                    accepts.add(t)
        return accepts

    def resume_parse(self):
        #--
        return self.parser.parse_from_state(self.parser_state, last_token=self.lexer_thread.state.last_token)



class ImmutableInteractiveParser(InteractiveParser):
    #--

    result = None

    def __hash__(self):
        return hash((self.parser_state, self.lexer_thread))

    def feed_token(self, token):
        c = copy(self)
        c.result = InteractiveParser.feed_token(c, token)
        return c

    def exhaust_lexer(self):
        #--
        cursor = self.as_mutable()
        cursor.exhaust_lexer()
        return cursor.as_immutable()

    def as_mutable(self):
        #--
        p = copy(self)
        return InteractiveParser(p.parser, p.parser_state, p.lexer_thread)



def _wrap_lexer(lexer_class):
    future_interface = getattr(lexer_class, '__future_interface__', False)
    if future_interface:
        return lexer_class
    else:
        class CustomLexerWrapper(Lexer):
            def __init__(self, lexer_conf):
                self.lexer = lexer_class(lexer_conf)
            def lex(self, lexer_state, parser_state):
                return self.lexer.lex(lexer_state.text)
        return CustomLexerWrapper


def _deserialize_parsing_frontend(data, memo, lexer_conf, callbacks, options):
    parser_conf = ParserConf.deserialize(data['parser_conf'], memo)
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    parser = cls.deserialize(data['parser'], memo, callbacks, options.debug)
    parser_conf.callbacks = callbacks
    return ParsingFrontend(lexer_conf, parser_conf, options, parser=parser)


_parser_creators: 'Dict[str, Callable[[LexerConf, Any, Any], Any]]' = {}


class ParsingFrontend(Serialize):
    __serialize_fields__ = 'lexer_conf', 'parser_conf', 'parser'

    lexer_conf: LexerConf
    parser_conf: ParserConf
    options: Any

    def __init__(self, lexer_conf: LexerConf, parser_conf: ParserConf, options, parser=None):
        self.parser_conf = parser_conf
        self.lexer_conf = lexer_conf
        self.options = options

        ##

        if parser:  ##

            self.parser = parser
        else:
            create_parser = _parser_creators.get(parser_conf.parser_type)
            assert create_parser is not None, "{} is not supported in standalone mode".format(
                    parser_conf.parser_type
                )
            self.parser = create_parser(lexer_conf, parser_conf, options)

        ##

        lexer_type = lexer_conf.lexer_type
        self.skip_lexer = False
        if lexer_type in ('dynamic', 'dynamic_complete'):
            assert lexer_conf.postlex is None
            self.skip_lexer = True
            return

        if isinstance(lexer_type, type):
            assert issubclass(lexer_type, Lexer)
            self.lexer = _wrap_lexer(lexer_type)(lexer_conf)
        elif isinstance(lexer_type, str):
            create_lexer = {
                'basic': create_basic_lexer,
                'contextual': create_contextual_lexer,
            }[lexer_type]
            self.lexer = create_lexer(lexer_conf, self.parser, lexer_conf.postlex, options)
        else:
            raise TypeError("Bad value for lexer_type: {lexer_type}")

        if lexer_conf.postlex:
            self.lexer = PostLexConnector(self.lexer, lexer_conf.postlex)

    def _verify_start(self, start=None):
        if start is None:
            start_decls = self.parser_conf.start
            if len(start_decls) > 1:
                raise ConfigurationError("Lark initialized with more than 1 possible start rule. Must specify which start rule to parse", start_decls)
            start ,= start_decls
        elif start not in self.parser_conf.start:
            raise ConfigurationError("Unknown start rule %s. Must be one of %r" % (start, self.parser_conf.start))
        return start

    def _make_lexer_thread(self, text: str) -> Union[str, LexerThread]:
        cls = (self.options and self.options._plugins.get('LexerThread')) or LexerThread
        return text if self.skip_lexer else cls.from_text(self.lexer, text)

    def parse(self, text: str, start=None, on_error=None):
        chosen_start = self._verify_start(start)
        kw = {} if on_error is None else {'on_error': on_error}
        stream = self._make_lexer_thread(text)
        return self.parser.parse(stream, chosen_start, **kw)

    def parse_interactive(self, text: Optional[str]=None, start=None):
        ##

        ##

        chosen_start = self._verify_start(start)
        if self.parser_conf.parser_type != 'lalr':
            raise ConfigurationError("parse_interactive() currently only works with parser='lalr' ")
        stream = self._make_lexer_thread(text)  ##

        return self.parser.parse_interactive(stream, chosen_start)


def _validate_frontend_args(parser, lexer) -> None:
    assert_config(parser, ('lalr', 'earley', 'cyk'))
    if not isinstance(lexer, type):     ##

        expected = {
            'lalr': ('basic', 'contextual'),
            'earley': ('basic', 'dynamic', 'dynamic_complete'),
            'cyk': ('basic', ),
         }[parser]
        assert_config(lexer, expected, 'Parser %r does not support lexer %%r, expected one of %%s' % parser)


def _get_lexer_callbacks(transformer, terminals):
    result = {}
    for terminal in terminals:
        callback = getattr(transformer, terminal.name, None)
        if callback is not None:
            result[terminal.name] = callback
    return result

class PostLexConnector:
    def __init__(self, lexer, postlexer):
        self.lexer = lexer
        self.postlexer = postlexer

    def lex(self, lexer_state, parser_state):
        i = self.lexer.lex(lexer_state, parser_state)
        return self.postlexer.process(i)



def create_basic_lexer(lexer_conf, parser, postlex, options) -> BasicLexer:
    cls = (options and options._plugins.get('BasicLexer')) or BasicLexer
    return cls(lexer_conf)

def create_contextual_lexer(lexer_conf: LexerConf, parser, postlex, options) -> ContextualLexer:
    cls = (options and options._plugins.get('ContextualLexer')) or ContextualLexer
    parse_table: ParseTableBase[int] = parser._parse_table
    states: Dict[int, Collection[str]] = {idx:list(t.keys()) for idx, t in parse_table.states.items()}
    always_accept: Collection[str] = postlex.always_accept if postlex else ()
    return cls(lexer_conf, states, always_accept=always_accept)

def create_lalr_parser(lexer_conf: LexerConf, parser_conf: ParserConf, options=None) -> LALR_Parser:
    debug = options.debug if options else False
    strict = options.strict if options else False
    cls = (options and options._plugins.get('LALR_Parser')) or LALR_Parser
    return cls(parser_conf, debug=debug, strict=strict)

_parser_creators['lalr'] = create_lalr_parser




class PostLex(ABC):
    @abstractmethod
    def process(self, stream: Iterator[Token]) -> Iterator[Token]:
        return stream

    always_accept: Iterable[str] = ()

class LarkOptions(Serialize):
    #--

    start: List[str]
    debug: bool
    strict: bool
    transformer: 'Optional[Transformer]'
    propagate_positions: Union[bool, str]
    maybe_placeholders: bool
    cache: Union[bool, str]
    regex: bool
    g_regex_flags: int
    keep_all_tokens: bool
    tree_class: Optional[Callable[[str, List], Any]]
    parser: _ParserArgType
    lexer: _LexerArgType
    ambiguity: 'Literal["auto", "resolve", "explicit", "forest"]'
    postlex: Optional[PostLex]
    priority: 'Optional[Literal["auto", "normal", "invert"]]'
    lexer_callbacks: Dict[str, Callable[[Token], Token]]
    use_bytes: bool
    ordered_sets: bool
    edit_terminals: Optional[Callable[[TerminalDef], TerminalDef]]
    import_paths: 'List[Union[str, Callable[[Union[None, str, PackageResource], str], Tuple[str, str]]]]'
    source_path: Optional[str]

    OPTIONS_DOC = r"""
    **===  General Options  ===**

    start
            The start symbol. Either a string, or a list of strings for multiple possible starts (Default: "start")
    debug
            Display debug information and extra warnings. Use only when debugging (Default: ``False``)
            When used with Earley, it generates a forest graph as "sppf.png", if 'dot' is installed.
    strict
            Throw an exception on any potential ambiguity, including shift/reduce conflicts, and regex collisions.
    transformer
            Applies the transformer to every parse tree (equivalent to applying it after the parse, but faster)
    propagate_positions
            Propagates positional attributes into the 'meta' attribute of all tree branches.
            Sets attributes: (line, column, end_line, end_column, start_pos, end_pos,
                              container_line, container_column, container_end_line, container_end_column)
            Accepts ``False``, ``True``, or a callable, which will filter which nodes to ignore when propagating.
    maybe_placeholders
            When ``True``, the ``[]`` operator returns ``None`` when not matched.
            When ``False``,  ``[]`` behaves like the ``?`` operator, and returns no value at all.
            (default= ``True``)
    cache
            Cache the results of the Lark grammar analysis, for x2 to x3 faster loading. LALR only for now.

            - When ``False``, does nothing (default)
            - When ``True``, caches to a temporary file in the local directory
            - When given a string, caches to the path pointed by the string
    regex
            When True, uses the ``regex`` module instead of the stdlib ``re``.
    g_regex_flags
            Flags that are applied to all terminals (both regex and strings)
    keep_all_tokens
            Prevent the tree builder from automagically removing "punctuation" tokens (Default: ``False``)
    tree_class
            Lark will produce trees comprised of instances of this class instead of the default ``lark.Tree``.

    **=== Algorithm Options ===**

    parser
            Decides which parser engine to use. Accepts "earley" or "lalr". (Default: "earley").
            (there is also a "cyk" option for legacy)
    lexer
            Decides whether or not to use a lexer stage

            - "auto" (default): Choose for me based on the parser
            - "basic": Use a basic lexer
            - "contextual": Stronger lexer (only works with parser="lalr")
            - "dynamic": Flexible and powerful (only with parser="earley")
            - "dynamic_complete": Same as dynamic, but tries *every* variation of tokenizing possible.
    ambiguity
            Decides how to handle ambiguity in the parse. Only relevant if parser="earley"

            - "resolve": The parser will automatically choose the simplest derivation
              (it chooses consistently: greedy for tokens, non-greedy for rules)
            - "explicit": The parser will return all derivations wrapped in "_ambig" tree nodes (i.e. a forest).
            - "forest": The parser will return the root of the shared packed parse forest.

    **=== Misc. / Domain Specific Options ===**

    postlex
            Lexer post-processing (Default: ``None``) Only works with the basic and contextual lexers.
    priority
            How priorities should be evaluated - "auto", ``None``, "normal", "invert" (Default: "auto")
    lexer_callbacks
            Dictionary of callbacks for the lexer. May alter tokens during lexing. Use with caution.
    use_bytes
            Accept an input of type ``bytes`` instead of ``str``.
    ordered_sets
            Should Earley use ordered-sets to achieve stable output (~10% slower than regular sets. Default: True)
    edit_terminals
            A callback for editing the terminals before parse.
    import_paths
            A List of either paths or loader functions to specify from where grammars are imported
    source_path
            Override the source of from where the grammar was loaded. Useful for relative imports and unconventional grammar loading
    **=== End of Options ===**
    """
    if __doc__:
        __doc__ += OPTIONS_DOC


    ##

    ##

    ##

    ##

    ##

    ##

    _defaults: Dict[str, Any] = {
        'debug': False,
        'strict': False,
        'keep_all_tokens': False,
        'tree_class': None,
        'cache': False,
        'postlex': None,
        'parser': 'earley',
        'lexer': 'auto',
        'transformer': None,
        'start': 'start',
        'priority': 'auto',
        'ambiguity': 'auto',
        'regex': False,
        'propagate_positions': False,
        'lexer_callbacks': {},
        'maybe_placeholders': True,
        'edit_terminals': None,
        'g_regex_flags': 0,
        'use_bytes': False,
        'ordered_sets': True,
        'import_paths': [],
        'source_path': None,
        '_plugins': {},
    }

    def __init__(self, options_dict: Dict[str, Any]) -> None:
        o = dict(options_dict)

        options = {}
        for name, default in self._defaults.items():
            if name in o:
                value = o.pop(name)
                if isinstance(default, bool) and name not in ('cache', 'use_bytes', 'propagate_positions'):
                    value = bool(value)
            else:
                value = default

            options[name] = value

        if isinstance(options['start'], str):
            options['start'] = [options['start']]

        self.__dict__['options'] = options


        assert_config(self.parser, ('earley', 'lalr', 'cyk', None))

        if self.parser == 'earley' and self.transformer:
            raise ConfigurationError('Cannot specify an embedded transformer when using the Earley algorithm. '
                             'Please use your transformer on the resulting parse tree, or use a different algorithm (i.e. LALR)')

        if o:
            raise ConfigurationError("Unknown options: %s" % o.keys())

    def __getattr__(self, name: str) -> Any:
        try:
            return self.__dict__['options'][name]
        except KeyError as e:
            raise AttributeError(e)

    def __setattr__(self, name: str, value: str) -> None:
        assert_config(name, self.options.keys(), "%r isn't a valid option. Expected one of: %s")
        self.options[name] = value

    def serialize(self, memo = None) -> Dict[str, Any]:
        return self.options

    @classmethod
    def deserialize(cls, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]]) -> "LarkOptions":
        return cls(data)


##

##

_LOAD_ALLOWED_OPTIONS = {'postlex', 'transformer', 'lexer_callbacks', 'use_bytes', 'debug', 'g_regex_flags', 'regex', 'propagate_positions', 'tree_class', '_plugins'}

_VALID_PRIORITY_OPTIONS = ('auto', 'normal', 'invert', None)
_VALID_AMBIGUITY_OPTIONS = ('auto', 'resolve', 'explicit', 'forest')


_T = TypeVar('_T', bound="Lark")

class Lark(Serialize):
    #--

    source_path: str
    source_grammar: str
    grammar: 'Grammar'
    options: LarkOptions
    lexer: Lexer
    parser: 'ParsingFrontend'
    terminals: Collection[TerminalDef]

    def __init__(self, grammar: 'Union[Grammar, str, IO[str]]', **options) -> None:
        self.options = LarkOptions(options)
        re_module: types.ModuleType

        ##

        use_regex = self.options.regex
        if use_regex:
            if _has_regex:
                re_module = regex
            else:
                raise ImportError('`regex` module must be installed if calling `Lark(regex=True)`.')
        else:
            re_module = re

        ##

        if self.options.source_path is None:
            try:
                self.source_path = grammar.name  ##

            except AttributeError:
                self.source_path = '<string>'
        else:
            self.source_path = self.options.source_path

        ##

        try:
            read = grammar.read  ##

        except AttributeError:
            pass
        else:
            grammar = read()

        cache_fn = None
        cache_sha256 = None
        if isinstance(grammar, str):
            self.source_grammar = grammar
            if self.options.use_bytes:
                if not grammar.isascii():
                    raise ConfigurationError("Grammar must be ascii only, when use_bytes=True")

            if self.options.cache:
                if self.options.parser != 'lalr':
                    raise ConfigurationError("cache only works with parser='lalr' for now")

                unhashable = ('transformer', 'postlex', 'lexer_callbacks', 'edit_terminals', '_plugins')
                options_str = ''.join(k+str(v) for k, v in options.items() if k not in unhashable)
                from . import __version__
                s = grammar + options_str + __version__ + str(sys.version_info[:2])
                cache_sha256 = sha256_digest(s)

                if isinstance(self.options.cache, str):
                    cache_fn = self.options.cache
                else:
                    if self.options.cache is not True:
                        raise ConfigurationError("cache argument must be bool or str")

                    try:
                        username = getpass.getuser()
                    except Exception:
                        ##

                        ##

                        ##

                        username = "unknown"

                    cache_fn = tempfile.gettempdir() + "/.lark_cache_%s_%s_%s_%s.tmp" % (username, cache_sha256, *sys.version_info[:2])

                old_options = self.options
                try:
                    with FS.open(cache_fn, 'rb') as f:
                        logger.debug('Loading grammar from cache: %s', cache_fn)
                        ##

                        for name in (set(options) - _LOAD_ALLOWED_OPTIONS):
                            del options[name]
                        file_sha256 = f.readline().rstrip(b'\n')
                        cached_used_files = pickle.load(f)
                        if file_sha256 == cache_sha256.encode('utf8') and verify_used_files(cached_used_files):
                            cached_parser_data = pickle.load(f)
                            self._load(cached_parser_data, **options)
                            return
                except FileNotFoundError:
                    ##

                    pass
                except Exception: ##

                    logger.exception("Failed to load Lark from cache: %r. We will try to carry on.", cache_fn)

                    ##

                    ##

                    self.options = old_options


            ##

            self.grammar, used_files = load_grammar(grammar, self.source_path, self.options.import_paths, self.options.keep_all_tokens)
        else:
            assert isinstance(grammar, Grammar)
            self.grammar = grammar


        if self.options.lexer == 'auto':
            if self.options.parser == 'lalr':
                self.options.lexer = 'contextual'
            elif self.options.parser == 'earley':
                if self.options.postlex is not None:
                    logger.info("postlex can't be used with the dynamic lexer, so we use 'basic' instead. "
                                "Consider using lalr with contextual instead of earley")
                    self.options.lexer = 'basic'
                else:
                    self.options.lexer = 'dynamic'
            elif self.options.parser == 'cyk':
                self.options.lexer = 'basic'
            else:
                assert False, self.options.parser
        lexer = self.options.lexer
        if isinstance(lexer, type):
            assert issubclass(lexer, Lexer)     ##

        else:
            assert_config(lexer, ('basic', 'contextual', 'dynamic', 'dynamic_complete'))
            if self.options.postlex is not None and 'dynamic' in lexer:
                raise ConfigurationError("Can't use postlex with a dynamic lexer. Use basic or contextual instead")

        if self.options.ambiguity == 'auto':
            if self.options.parser == 'earley':
                self.options.ambiguity = 'resolve'
        else:
            assert_config(self.options.parser, ('earley', 'cyk'), "%r doesn't support disambiguation. Use one of these parsers instead: %s")

        if self.options.priority == 'auto':
            self.options.priority = 'normal'

        if self.options.priority not in _VALID_PRIORITY_OPTIONS:
            raise ConfigurationError("invalid priority option: %r. Must be one of %r" % (self.options.priority, _VALID_PRIORITY_OPTIONS))
        if self.options.ambiguity not in _VALID_AMBIGUITY_OPTIONS:
            raise ConfigurationError("invalid ambiguity option: %r. Must be one of %r" % (self.options.ambiguity, _VALID_AMBIGUITY_OPTIONS))

        if self.options.parser is None:
            terminals_to_keep = '*'
        elif self.options.postlex is not None:
            terminals_to_keep = set(self.options.postlex.always_accept)
        else:
            terminals_to_keep = set()

        ##

        self.terminals, self.rules, self.ignore_tokens = self.grammar.compile(self.options.start, terminals_to_keep)

        if self.options.edit_terminals:
            for t in self.terminals:
                self.options.edit_terminals(t)

        self._terminals_dict = {t.name: t for t in self.terminals}

        ##

        if self.options.priority == 'invert':
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = -rule.options.priority
            for term in self.terminals:
                term.priority = -term.priority
        ##

        ##

        ##

        elif self.options.priority is None:
            for rule in self.rules:
                if rule.options.priority is not None:
                    rule.options.priority = None
            for term in self.terminals:
                term.priority = 0

        ##

        self.lexer_conf = LexerConf(
                self.terminals, re_module, self.ignore_tokens, self.options.postlex,
                self.options.lexer_callbacks, self.options.g_regex_flags, use_bytes=self.options.use_bytes, strict=self.options.strict
            )

        if self.options.parser:
            self.parser = self._build_parser()
        elif lexer:
            self.lexer = self._build_lexer()

        if cache_fn:
            logger.debug('Saving grammar to cache: %s', cache_fn)
            try:
                with FS.open(cache_fn, 'wb') as f:
                    assert cache_sha256 is not None
                    f.write(cache_sha256.encode('utf8') + b'\n')
                    pickle.dump(used_files, f)
                    self.save(f, _LOAD_ALLOWED_OPTIONS)
            except IOError as e:
                logger.exception("Failed to save Lark to cache: %r.", cache_fn, e)

    if __doc__:
        __doc__ += "\n\n" + LarkOptions.OPTIONS_DOC

    __serialize_fields__ = 'parser', 'rules', 'options'

    def _build_lexer(self, dont_ignore: bool=False) -> BasicLexer:
        lexer_conf = self.lexer_conf
        if dont_ignore:
            from copy import copy
            lexer_conf = copy(lexer_conf)
            lexer_conf.ignore = ()
        return BasicLexer(lexer_conf)

    def _prepare_callbacks(self) -> None:
        self._callbacks = {}
        ##

        if self.options.ambiguity != 'forest':
            self._parse_tree_builder = ParseTreeBuilder(
                    self.rules,
                    self.options.tree_class or Tree,
                    self.options.propagate_positions,
                    self.options.parser != 'lalr' and self.options.ambiguity == 'explicit',
                    self.options.maybe_placeholders
                )
            self._callbacks = self._parse_tree_builder.create_callback(self.options.transformer)
        self._callbacks.update(_get_lexer_callbacks(self.options.transformer, self.terminals))

    def _build_parser(self) -> "ParsingFrontend":
        self._prepare_callbacks()
        _validate_frontend_args(self.options.parser, self.options.lexer)
        parser_conf = ParserConf(self.rules, self._callbacks, self.options.start)
        return _construct_parsing_frontend(
            self.options.parser,
            self.options.lexer,
            self.lexer_conf,
            parser_conf,
            options=self.options
        )

    def save(self, f, exclude_options: Collection[str] = ()) -> None:
        #--
        if self.options.parser != 'lalr':
            raise NotImplementedError("Lark.save() is only implemented for the LALR(1) parser.")
        data, m = self.memo_serialize([TerminalDef, Rule])
        if exclude_options:
            data["options"] = {n: v for n, v in data["options"].items() if n not in exclude_options}
        pickle.dump({'data': data, 'memo': m}, f, protocol=pickle.HIGHEST_PROTOCOL)

    @classmethod
    def load(cls: Type[_T], f) -> _T:
        #--
        inst = cls.__new__(cls)
        return inst._load(f)

    def _deserialize_lexer_conf(self, data: Dict[str, Any], memo: Dict[int, Union[TerminalDef, Rule]], options: LarkOptions) -> LexerConf:
        lexer_conf = LexerConf.deserialize(data['lexer_conf'], memo)
        lexer_conf.callbacks = options.lexer_callbacks or {}
        lexer_conf.re_module = regex if options.regex else re
        lexer_conf.use_bytes = options.use_bytes
        lexer_conf.g_regex_flags = options.g_regex_flags
        lexer_conf.skip_validation = True
        lexer_conf.postlex = options.postlex
        return lexer_conf

    def _load(self: _T, f: Any, **kwargs) -> _T:
        if isinstance(f, dict):
            d = f
        else:
            d = pickle.load(f)
        memo_json = d['memo']
        data = d['data']

        assert memo_json
        memo = SerializeMemoizer.deserialize(memo_json, {'Rule': Rule, 'TerminalDef': TerminalDef}, {})
        options = dict(data['options'])
        if (set(kwargs) - _LOAD_ALLOWED_OPTIONS) & set(LarkOptions._defaults):
            raise ConfigurationError("Some options are not allowed when loading a Parser: {}"
                             .format(set(kwargs) - _LOAD_ALLOWED_OPTIONS))
        options.update(kwargs)
        self.options = LarkOptions.deserialize(options, memo)
        self.rules = [Rule.deserialize(r, memo) for r in data['rules']]
        self.source_path = '<deserialized>'
        _validate_frontend_args(self.options.parser, self.options.lexer)
        self.lexer_conf = self._deserialize_lexer_conf(data['parser'], memo, self.options)
        self.terminals = self.lexer_conf.terminals
        self._prepare_callbacks()
        self._terminals_dict = {t.name: t for t in self.terminals}
        self.parser = _deserialize_parsing_frontend(
            data['parser'],
            memo,
            self.lexer_conf,
            self._callbacks,
            self.options,  ##

        )
        return self

    @classmethod
    def _load_from_dict(cls, data, memo, **kwargs):
        inst = cls.__new__(cls)
        return inst._load({'data': data, 'memo': memo}, **kwargs)

    @classmethod
    def open(cls: Type[_T], grammar_filename: str, rel_to: Optional[str]=None, **options) -> _T:
        #--
        if rel_to:
            basepath = os.path.dirname(rel_to)
            grammar_filename = os.path.join(basepath, grammar_filename)
        with open(grammar_filename, encoding='utf8') as f:
            return cls(f, **options)

    @classmethod
    def open_from_package(cls: Type[_T], package: str, grammar_path: str, search_paths: 'Sequence[str]'=[""], **options) -> _T:
        #--
        package_loader = FromPackageLoader(package, search_paths)
        full_path, text = package_loader(None, grammar_path)
        options.setdefault('source_path', full_path)
        options.setdefault('import_paths', [])
        options['import_paths'].append(package_loader)
        return cls(text, **options)

    def __repr__(self):
        return 'Lark(open(%r), parser=%r, lexer=%r, ...)' % (self.source_path, self.options.parser, self.options.lexer)


    def lex(self, text: str, dont_ignore: bool=False) -> Iterator[Token]:
        #--
        lexer: Lexer
        if not hasattr(self, 'lexer') or dont_ignore:
            lexer = self._build_lexer(dont_ignore)
        else:
            lexer = self.lexer
        lexer_thread = LexerThread.from_text(lexer, text)
        stream = lexer_thread.lex(None)
        if self.options.postlex:
            return self.options.postlex.process(stream)
        return stream

    def get_terminal(self, name: str) -> TerminalDef:
        #--
        return self._terminals_dict[name]

    def parse_interactive(self, text: Optional[str]=None, start: Optional[str]=None) -> 'InteractiveParser':
        #--
        return self.parser.parse_interactive(text, start=start)

    def parse(self, text: str, start: Optional[str]=None, on_error: 'Optional[Callable[[UnexpectedInput], bool]]'=None) -> 'ParseTree':
        #--
        return self.parser.parse(text, start=start, on_error=on_error)




class DedentError(LarkError):
    pass

class Indenter(PostLex, ABC):
    #--
    paren_level: int
    indent_level: List[int]

    def __init__(self) -> None:
        self.paren_level = 0
        self.indent_level = [0]
        assert self.tab_len > 0

    def handle_NL(self, token: Token) -> Iterator[Token]:
        if self.paren_level > 0:
            return

        yield token

        indent_str = token.rsplit('\n', 1)[1] ##

        indent = indent_str.count(' ') + indent_str.count('\t') * self.tab_len

        if indent > self.indent_level[-1]:
            self.indent_level.append(indent)
            yield Token.new_borrow_pos(self.INDENT_type, indent_str, token)
        else:
            while indent < self.indent_level[-1]:
                self.indent_level.pop()
                yield Token.new_borrow_pos(self.DEDENT_type, indent_str, token)

            if indent != self.indent_level[-1]:
                raise DedentError('Unexpected dedent to column %s. Expected dedent to %s' % (indent, self.indent_level[-1]))

    def _process(self, stream):
        for token in stream:
            if token.type == self.NL_type:
                yield from self.handle_NL(token)
            else:
                yield token

            if token.type in self.OPEN_PAREN_types:
                self.paren_level += 1
            elif token.type in self.CLOSE_PAREN_types:
                self.paren_level -= 1
                assert self.paren_level >= 0

        while len(self.indent_level) > 1:
            self.indent_level.pop()
            yield Token(self.DEDENT_type, '')

        assert self.indent_level == [0], self.indent_level

    def process(self, stream):
        self.paren_level = 0
        self.indent_level = [0]
        return self._process(stream)

    ##

    @property
    def always_accept(self):
        return (self.NL_type,)

    @property
    @abstractmethod
    def NL_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def OPEN_PAREN_types(self) -> List[str]:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def CLOSE_PAREN_types(self) -> List[str]:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def INDENT_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def DEDENT_type(self) -> str:
        #--
        raise NotImplementedError()

    @property
    @abstractmethod
    def tab_len(self) -> int:
        #--
        raise NotImplementedError()


class PythonIndenter(Indenter):
    #--

    NL_type = '_NEWLINE'
    OPEN_PAREN_types = ['LPAR', 'LSQB', 'LBRACE']
    CLOSE_PAREN_types = ['RPAR', 'RSQB', 'RBRACE']
    INDENT_type = '_INDENT'
    DEDENT_type = '_DEDENT'
    tab_len = 8


import pickle, zlib, base64
DATA = (
b''
)
DATA = pickle.loads(zlib.decompress(base64.b64decode(DATA)))
MEMO = (
b'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'
)
MEMO = pickle.loads(zlib.decompress(base64.b64decode(MEMO)))
Shift = 0
Reduce = 1
def Lark_StandAlone(**kwargs):
  return Lark._load_from_dict(DATA, MEMO, **kwargs)
